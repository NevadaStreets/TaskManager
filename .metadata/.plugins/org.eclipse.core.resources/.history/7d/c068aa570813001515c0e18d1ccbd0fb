package view;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.time.LocalDate;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.Slider;
import javafx.scene.control.TextField;
import javafx.stage.Stage;

import org.controlsfx.dialog.Dialogs;

import application.Contexto;
import application.Main;
import application.Proyecto;
import application.Tarea;
import util.DateUtil;

public class EditContextController {
	@FXML
    private TextField firstNameField;

	@FXML
	private Label priorityField;
    @FXML
    private Slider slider;
    
    @FXML
    private ComboBox<Contexto> contextBox;
    /*@FXML
    private TextField startDayField;
    @FXML
    private TextField startMonthField;
    @FXML
    private TextField startYearField;
    @FXML
    private TextField deadlineDayField;
    @FXML
    private TextField deadlineMonthField;
    @FXML
    private TextField deadlineYearField;*/


    private Stage dialogStage;
    private boolean okClicked = false;
    public Main mainApp;
	private Contexto context;

    /**
     * Initializes the controller class. This method is automatically called
     * after the fxml file has been loaded.
     */
    @FXML
    private void initialize() {
    	
    	//contextBox.setItems(mainApp.getContextData());

    	//contextBox.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -> handleSelect(newValue));
    }

    /**
     * Sets the stage of this dialog.
     * 
     * @param dialogStage
     */
    public void setDialogStage(Stage dialogStage) {
        this.dialogStage = dialogStage;
    }
    public void setMainApp(Main mainApp) {
        this.mainApp = mainApp;
        contextBox.setItems(mainApp.getContextData());
        
        // Add observable list data to the table
       /* taskTable.setItems(mainApp.getTaskData());
        int largo = mainApp.getTaskData().size();
        for (int i=largo-1;i>=0;i--){
        	if(taskTable.getItems().get(i).getEstado().equals("Completada")){
        		taskTable.getItems().remove(i);
        	}
        }*/
        
        
    }
    
    /*public void setMainApp(Main mainApp) {
        this.mainApp = mainApp;
    }*/

    /**
     * Sets the person to be edited in the dialog.
     * 
     * @param person
     */
    public void setPerson(Contexto context) {
        this.context = context;
        /*ObservableList <String> contexts = FXCollections.observableArrayList();
        contexts.add("En la oficina");
        contexts.add("En el auto");
        contexts.add("Al teléfono");
        contexts.add("En casa");*/
        firstNameField.setText(context.getContext());
       // slider.setValue(context.getPriority()/12);
        
       priorityField.setText(Integer.toString(context.getPriority()));
        
        
        //String s = DateUtil.format(proyect.getInicio());
        //String d = DateUtil.format(proyect.getDeadline()); 
        //startDayField.setText(s.substring(0, s.indexOf('.')));
        //startMonthField.setText(s.substring(s.indexOf('.')+1, s.lastIndexOf('.')));
        //startYearField.setText(s.substring(s.lastIndexOf('.')+1,s.length()));
        //deadlineDayField.setText(d.substring(0, d.indexOf('.')));
        //deadlineMonthField.setText(d.substring(d.indexOf('.')+1, d.lastIndexOf('.')));
        //deadlineYearField.setText(d.substring(d.lastIndexOf('.')+1,d.length()));
        //startDayField.setPromptText("dd.mm.yyyy");
        //deadlineField.setPromptText("dd.mm.yyyy");
    }

    /**
     * Returns true if the user clicked OK, false otherwise.
     * 
     * @return
     */
    public boolean isOkClicked() {
        return okClicked;
    }

    @FXML
    private void handlePrioridad(){
    	
    	this.priorityField.setText(""+(int)(slider.getValue()*12)); 
    }
    
    
    /**
     * Called when the user clicks ok.
     */
    @FXML
    private void handleOk() {
        if (isInputValid()) {
        	
        	String s = contextBox.getSelectionModel().getSelectedItem().getContext();
        	String nombre = firstNameField.getText();
        	int j = Integer.parseInt(priorityField.getText());
        	for (int i=0;i<mainApp.getContextData().size();i++){
        		if (mainApp.getContextData().get(i).getContext().equals(s)){
        			mainApp.getContextData().get(i).setContext(nombre);
        			//mainApp.getContextData().get(i).setPriority(Integer.parseInt(priorityField.getText()));;
        			        		}
        	}
        	
        	okClicked = true;
            dialogStage.close();
        }
    }

    /**
     * Called when the user clicks cancel.
     */
    @FXML
//    private void handleSelect(Contexto context) {
//        firstNameField.setText(context.getContext());
//        priorityField.setText(Integer.toString(context.getPriority()));
        
//    }
    private void handleSelect() {
        firstNameField.setText(contextBox.getValue().getContext());
        priorityField.setText(Integer.toString(contextBox.getValue().getPriority()));
      //  slider.setValue(context.getPriority()/12);
        
    }

    /**
     * Validates the user input in the text fields.
     * 
     * @return true if the input is valid
     */
    private boolean isInputValid() {
        String errorMessage = "";
        /*if (startDayField.getText().length()==1){
        	startDayField.setText("0"+startDayField.getText());
        }
        if (startMonthField.getText().length()==1){
        	startMonthField.setText("0"+startMonthField.getText());
        }
        if (deadlineDayField.getText().length()==1){
        	deadlineDayField.setText("0"+deadlineDayField.getText());
        }
        if (deadlineMonthField.getText().length()==1){
        	deadlineMonthField.setText("0"+deadlineMonthField.getText());
        }
        String Start = startDayField.getText()+"."+startMonthField.getText()+"."+startYearField.getText();
        String Deadline = deadlineDayField.getText()+"."+deadlineMonthField.getText()+"."+deadlineYearField.getText();*/

        if (firstNameField.getText() == null || firstNameField.getText().length() == 0) {
            errorMessage += "Nombre no valido!\n"; 
        }

        if (priorityField.getText() == null || priorityField.getText().length() == 0) {
            errorMessage += "Prioridad no valida!\n"; 
        } else {
            
            try {
                Integer.parseInt(priorityField.getText());
            } catch (NumberFormatException e) {
                errorMessage += "Prioridad no valida (debe ser un entero)!\n"; 
            }
        }
        
        //validar fecha de inicio
        /*if (Start == null || Start.length() == 0) {
            errorMessage += "fecha inicio no valida!\n";
        } else {
            if (!DateUtil.validDate(Start)) {
                errorMessage += "Fecha inicio no valida. Usa el formato dd mm yyyy!\n";
            }
        }

        //validar fecha de fin
        if (Deadline == null || Deadline.length() == 0) {
            errorMessage += "deadline no valido!\n";
        } else {
            if (!DateUtil.validDate(Deadline)) {
                errorMessage += "Deadline no valido. Usa el formato dd mm yyyy!\n";
            }
            //Compara fechas solo si estas estan bien creadas
            if (DateUtil.validDate(Deadline) && DateUtil.validDate(Start)){
            	if (DateUtil.parse(Deadline).compareTo(DateUtil.parse(Start)) < 0) {
                    errorMessage += "fecha de inicio debe venir antes del deadline!\n";
                } 

            }
        }*/
        
        
        if (errorMessage.length() == 0) {
            return true;
        } else {
            // Show the error message.
            Dialogs.create()
                .title("Campos invalidos")
                .masthead("Por favor cambiar los campos invalidos")
                .message(errorMessage)
                .showError();
            return false;
        }
    }
}